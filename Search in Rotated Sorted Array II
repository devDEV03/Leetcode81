class Solution {
    static boolean BinarySearch(int[] arr,int target,int start,int end){
        boolean counter = false;
        while(start<=end){
           int mid = start + (end-start)/2;
            if(arr[mid] == target){
                return true;
            }
            else if(arr[mid]<target){
                start = mid+1;
            }
            else{
                end= mid-1;
            }
        }
        return false;
    }

    static int pivot(int arr[],int target){
        int start = 0;
        int end = arr.length-1;
        while(start<=end){
            int mid = start + (end-start)/2;
            if(mid>start && arr[mid-1]>arr[mid]){
                return mid-1;
            }
            if(mid<end && arr[mid]>arr[mid+1]){
                return mid;
            }

            if(arr[mid]==arr[start]){
                if(arr[mid]>target){
                    end = mid-1;
                }
                else{
                    start = mid+1;
                }
            }
            else if(arr[mid]>arr[start]){
                start = mid+1;
            }
            else{
                end = mid-1;
            }
        }
        return -1;
    }
    public boolean search(int[] nums, int target) {

        int pivot_num = 0;
        int max = Integer.MIN_VALUE;
        for(int i = 0;i<nums.length;i++){
            if(nums[i]>=max){
                max = nums[i];
                pivot_num =i;
            }
            else{
                break;
            }
        }
  
            if(BinarySearch(nums,target,0,pivot_num)){
                return true; 
            }
            else{
                return BinarySearch(nums,target,pivot_num +1,nums.length-1);
            }

    }
}
